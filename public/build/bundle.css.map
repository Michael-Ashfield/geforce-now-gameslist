{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../TableSort.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { TableSort } from \"svelte-tablesort\";\n  let games = [];\n\n  fetch(\n    \"https://static.nvidiagrid.net/supported-public-game-list/gfnpc.json?JSON\"\n  )\n    .then(response => {\n      return response.json();\n    })\n    .then(res => {\n      games = res;\n      console.log(games);\n    });\n</script>\n\n<style>\n  .svelte-fix {\n    display: none;\n  }\n  .ascending {\n    color: hotpink !important;\n  }\n\n  :global(table td, table th) {\n    border: 1px solid silver;\n  }\n\n  :global(.descending:after, .ascending:after) {\n    content: \" \";\n    position: relative;\n    left: 5px;\n    border: 5px solid transparent;\n  }\n\n  :global(.descending:after) {\n    top: 14px;\n    border-top-color: silver;\n  }\n\n  :global(.ascending:after) {\n    bottom: 12px;\n    border-bottom-color: silver;\n  }\n\n  :global(.descending, .ascending) {\n    padding-right: 10px;\n  }\n</style>\n\n<main>\n  <h1>\n    <u>Geforce Now Game List</u>\n  </h1>\n  <h3>\n    This is a table directly from the current Nvidia's\n    <a\n      href=\"https://static.nvidiagrid.net/supported-public-game-list/gfnpc.json?JSON\">\n      JSON data here.\n    </a>\n    <br />\n    ðŸ’• Please feel free to contribute code to the project\n    <a href=\"https://github.com/lettuceboop/geforce-now-gameslist\">here</a>\n    ðŸ’•\n  </h3>\n\n  <div class=\"container-fluid\">\n\n    <TableSort\n      items={games}\n      class=\"table table-striped table-bordered table-hover\">\n      <tr slot=\"thead\" class=\"thead-dark\">\n        <th data-sort=\"id\" data-sort-initial=\"descending\">ID</th>\n        <th data-sort=\"title\">Title</th>\n        <th data-sort=\"isFullyOptimized\">Is Fully Optimized</th>\n        <th data-sort=\"isHighlightsSupported\">Is Highlights Supported</th>\n        <th data-sort=\"publisher\">Publisher</th>\n        <th data-sort=\"genres\">Genres</th>\n        <th data-sort=\"status\">Status</th>\n      </tr>\n      <tr slot=\"tbody\" let:item>\n        <td>{item.id}</td>\n\n        <td>\n          <b>\n            <a href={item.steamUrl} title={item.title}>{item.title}</a>\n          </b>\n        </td>\n        <td>\n          {#if item.isFullyOptimized}Yes{:else}No{/if}\n        </td>\n        <td>\n          {#if item.isHighlightsSupported}Yes{:else}No{/if}\n        </td>\n        <td>{item.publisher}</td>\n        <td>\n          {item.genres}\n        </td>\n        <td>{item.status}</td>\n\n      </tr>\n    </TableSort>\n\n  </div>\n\n</main>\n",
    "<script>\n    const CLASSNAME_TABLE = 'tablesort'\n    const CLASSNAME_SORTABLE = 'sortable'\n    const CLASSNAME_ASC = 'ascending'\n    const CLASSNAME_DESC = 'descending'\n\n    import { onMount } from 'svelte'\n    import {\n        sortFunction,\n        compareStrings,\n        compareNumbers,\n    } from 'generator-sort'\n    export let items\n    let className = ''\n    export { className as class }\n\n    let thead\n    let sortOrder = [[]]\n\n    $: sortedItems = sorted([...items], sortOrder)\n\n    const sorted = function(arr, sortOrder) {\n        arr.sort(\n            sortFunction(function*(a, b) {\n                for (let [fieldName, r] of sortOrder) {\n                    const reverse = r === 0 ? 1 : -1\n                    if (typeof a[fieldName] === 'number') {\n                        yield reverse *\n                            compareNumbers(a[fieldName], b[fieldName])\n                    } else {\n                        yield reverse *\n                            compareStrings(a[fieldName], b[fieldName])\n                    }\n                }\n            })\n        )\n\n        return arr\n    }\n\n    function updateSortOrder(th, push) {\n        const fieldName = th.dataset.sort\n        if (push) {\n            if (sortOrder[sortOrder.length - 1][0] === fieldName) {\n                sortOrder[sortOrder.length - 1] = [\n                    fieldName,\n                    (sortOrder[sortOrder.length - 1][1] + 1) % 2,\n                ]\n            } else {\n                sortOrder = [...sortOrder, [fieldName, 0]]\n            }\n        } else {\n            if (sortOrder.length === 1 && sortOrder[0][0] === fieldName) {\n                sortOrder[0] = [fieldName, (sortOrder[0][1] + 1) % 2]\n            } else {\n                resetClasses()\n                sortOrder = [[fieldName, 0]]\n            }\n        }\n        th.className =\n            CLASSNAME_SORTABLE +\n            ' ' +\n            (sortOrder[sortOrder.length - 1][1]\n                ? CLASSNAME_DESC\n                : CLASSNAME_ASC)\n    }\n\n    function resetClasses() {\n        const th = thead.getElementsByTagName('th')\n        for (let i = 0; i < th.length; i++) {\n            if (th[i].dataset.sort) {\n                th[i].className = CLASSNAME_SORTABLE\n            }\n        }\n    }\n\n    onMount(() => {\n        const th = thead.getElementsByTagName('th')\n        for (let i = 0; i < th.length; i++) {\n            if (th[i].dataset.sort) {\n                th[i].className = CLASSNAME_SORTABLE\n                th[i].onclick = (event) =>\n                    updateSortOrder(th[i], event.shiftKey)\n            }\n            if (th[i].dataset.sortInitial === 'descending') {\n                th[i].className = CLASSNAME_SORTABLE + ' ' + CLASSNAME_DESC\n                sortOrder = [...sortOrder, [th[i].dataset.sort, 1]]\n            } else if (th[i].dataset.sortInitial != undefined) {\n                th[i].className = CLASSNAME_SORTABLE + ' ' + CLASSNAME_ASC\n                sortOrder = [...sortOrder, [th[i].dataset.sort, 0]]\n            }\n        }\n    })\n</script>\n\n<style>\n    thead :global(th.sortable) {\n        cursor: pointer;\n        user-select: none;\n        -moz-user-select: none;\n        -webkit-user-select: none;\n        -ms-user-select: none;\n    }\n</style>\n\n<table class=\"{CLASSNAME_TABLE} {className}\">\n    <thead bind:this={thead}>\n        <slot name=\"thead\" />\n    </thead>\n    <tbody>\n        {#each sortedItems as item}\n            <slot name=\"tbody\" {item} />\n        {/each}\n    </tbody>\n    <tfoot>\n        <slot name=\"tfoot\" />\n    </tfoot>\n</table>\n"
  ],
  "names": [],
  "mappings": "AAwBU,kBAAkB,AAAE,CAAC,AAC3B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,AAC1B,CAAC,AAEO,mCAAmC,AAAE,CAAC,AAC5C,OAAO,CAAE,GAAG,CACZ,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,AAC/B,CAAC,AAEO,iBAAiB,AAAE,CAAC,AAC1B,GAAG,CAAE,IAAI,CACT,gBAAgB,CAAE,MAAM,AAC1B,CAAC,AAEO,gBAAgB,AAAE,CAAC,AACzB,MAAM,CAAE,IAAI,CACZ,mBAAmB,CAAE,MAAM,AAC7B,CAAC,AAEO,uBAAuB,AAAE,CAAC,AAChC,aAAa,CAAE,IAAI,AACrB,CAAC;ACiDC,oBAAK,CAAC,AAAQ,WAAW,AAAE,CAAC,AACxB,MAAM,CAAE,OAAO,CACf,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,CACtB,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,AACzB,CAAC"
}